// Copyright (c) OpenMMLab. All rights reserved.

#include "mmdeploy/core/logger.h"
#include "mmdeploy/preprocess/transform/transform.h"

namespace mmdeploy::transform {

class Collect : public Transform {
 public:
  explicit Collect(const Value& args) {
    if (!args.contains("keys") || !args["keys"].is_array()) {
      throw std::invalid_argument(
          "'keys' is missed in arguments, or it is not an array as expected");
    }
    if (args.contains("meta_keys") && !args["meta_keys"].is_array()) {
      throw std::invalid_argument("'meta_keys' has to be an array");
    }

    for (auto& v : args["keys"]) {
      keys_.push_back(v.get<std::string>());
    }
    if (args.contains("meta_keys")) {
      for (auto& v : args["meta_keys"]) {
        meta_keys_.push_back(v.get<std::string>());
      }
    }
  }

  Result<void> Apply(Value& input) override {
    MMDEPLOY_DEBUG("input: {}", to_json(input).dump(2));
    Value::Object output{{"__data__", std::move(input["__data__"])}};

    // collect 'ori_img' and 'attribute' from `input`, because those two fields
    // are given by users, not generated by transform ops
    if (input.contains("ori_img")) {
      output["ori_img"] = input["ori_img"];
    }
    if (input.contains("attribute")) {
      output["attribute"] = input["attribute"];
    }

    for (auto& meta_key : meta_keys_) {
      if (input.contains(meta_key)) {
        output["img_metas"][meta_key] = input[meta_key];
      }
    }
    for (auto& key : keys_) {
      if (!input.contains(key)) {
        MMDEPLOY_INFO("missed key '{}' in input", key);
        return Status(eInvalidArgument);
      } else {
        output[key] = input[key];
      }
    }

    input = std::move(output);
    MMDEPLOY_DEBUG("output: {}", to_json(output).dump(2));
    return success();
  }

 private:
  std::vector<std::string> keys_;
  std::vector<std::string> meta_keys_;
};

MMDEPLOY_REGISTER_FACTORY_FUNC(Transform, (Collect, 0), [](const Value& config) {
  return std::make_unique<Collect>(config);
});

}  // namespace mmdeploy::transform
